{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T15:07:34.330Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T15:07:34.338Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T15:52:27.831Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T15:52:27.840Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T15:52:45.771Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T15:52:45.783Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:24:06.049Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:24:06.061Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:24:16.354Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:24:16.363Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:24:26.749Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:24:26.758Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:24:48.696Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:24:48.705Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:25:01.972Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:25:01.981Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:26:48.711Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:26:48.719Z"}
{"level":"error","timestamp":"2025-03-20T16:27:07.769Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:35:25.266Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:35:25.276Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:35:30.118Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:35:30.126Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:35:41.361Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:35:41.369Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:35:45.408Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:35:45.417Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:39:09.232Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:39:09.241Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:40:35.753Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:40:35.763Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:46:14.342Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:46:14.351Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T16:47:33.310Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T16:47:33.319Z"}
{"level":"error","message":"TypeError: Cannot read properties of undefined (reading 'findMany')\n    at Object.getAllCompanies (D:\\work\\noflexi\\data-service\\src\\services\\companyService.js:7:27)\n    at D:\\work\\noflexi\\data-service\\src\\routes\\companies.js:9:44\n    at Layer.handle [as handle_request] (D:\\work\\noflexi\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\work\\noflexi\\data-service\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\work\\noflexi\\data-service\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\work\\noflexi\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\work\\noflexi\\data-service\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\work\\noflexi\\data-service\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\work\\noflexi\\data-service\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (D:\\work\\noflexi\\data-service\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-03-20T16:50:15.821Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-20T23:38:03.440Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-20T23:38:03.474Z"}
{"level":"error","timestamp":"2025-03-20T23:56:33.750Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T02:00:58.027Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T02:00:58.036Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T02:04:26.806Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T02:04:26.815Z"}
{"level":"error","timestamp":"2025-03-26T02:05:17.833Z"}
{"level":"error","timestamp":"2025-03-26T02:05:36.228Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T13:22:44.979Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T13:22:44.987Z"}
{"level":"error","message":"Error: L'ID de l'entreprise est requis\n    at Object.createUser (D:\\work\\flexpaie\\data-service\\src\\services\\userService.js:57:13)\n    at D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:32:36\n    at Layer.handle [as handle_request] (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at D:\\work\\flexpaie\\data-service\\src\\utils\\validators.js:9:3\n    at Layer.handle [as handle_request] (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:284:15","timestamp":"2025-03-26T13:36:11.435Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T13:37:25.307Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T13:37:25.315Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T13:37:29.081Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T13:37:29.089Z"}
{"level":"error","message":"PrismaClientKnownRequestError: \nInvalid `prisma.company.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\companyService.js:57:27\n\n  54 \n  55 // Créer une nouvelle entreprise\n  56 async createCompany(companyData) {\n→ 57   return prisma.company.create(\nUnique constraint failed on the fields: (`iceNumber`)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7534)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\companies.js:45:21","timestamp":"2025-03-26T13:55:30.729Z"}
{"level":"error","message":"PrismaClientKnownRequestError: \nInvalid `prisma.company.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\companyService.js:57:27\n\n  54 \n  55 // Créer une nouvelle entreprise\n  56 async createCompany(companyData) {\n→ 57   return prisma.company.create(\nUnique constraint failed on the fields: (`iceNumber`)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7534)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\companies.js:45:21","timestamp":"2025-03-26T13:56:46.187Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T14:24:40.353Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T14:24:40.362Z"}
{"level":"error","message":"PrismaClientKnownRequestError: \nInvalid `prisma.company.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\companyService.js:57:27\n\n  54 \n  55 // Créer une nouvelle entreprise\n  56 async createCompany(companyData) {\n→ 57   return prisma.company.create(\nUnique constraint failed on the fields: (`iceNumber`)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7534)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\companies.js:45:21","timestamp":"2025-03-26T14:24:46.122Z"}
{"level":"error","message":"PrismaClientKnownRequestError: \nInvalid `prisma.company.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\companyService.js:57:27\n\n  54 \n  55 // Créer une nouvelle entreprise\n  56 async createCompany(companyData) {\n→ 57   return prisma.company.create(\nUnique constraint failed on the fields: (`registryNumber`)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7534)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\companies.js:45:21","timestamp":"2025-03-26T14:24:54.045Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T14:25:13.052Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T14:25:13.060Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T14:28:18.478Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T14:28:18.487Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T14:35:05.014Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T14:35:05.022Z"}
{"level":"error","message":"PrismaClientKnownRequestError: \nInvalid `prisma.company.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\companyService.js:57:27\n\n  54 \n  55 // Créer une nouvelle entreprise\n  56 async createCompany(companyData) {\n→ 57   return prisma.company.create(\nUnique constraint failed on the fields: (`iceNumber`)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7534)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\companies.js:45:21","timestamp":"2025-03-26T14:36:01.132Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T14:53:44.203Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T14:53:44.219Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T14:56:50.531Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T14:56:50.540Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T15:10:24.611Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T15:10:24.626Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T15:10:53.603Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T15:10:53.612Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-26T17:38:20.673Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-26T17:38:20.686Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-27T13:48:38.599Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-27T13:48:38.606Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-28T16:11:51.034Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-28T16:11:51.049Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-03-28T17:02:51.940Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-03-28T17:02:51.949Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T13:23:02.212Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T13:23:02.248Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T14:29:47.411Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T14:29:47.419Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T18:30:07.150Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T18:30:07.158Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T18:35:41.797Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T18:35:41.806Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T18:38:13.445Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T18:38:13.453Z"}
{"level":"error","message":"TypeError: employeeService.createEmployeeWithUser is not a function\n    at D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:42\n    at Layer.handle [as handle_request] (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:175:3)\n    at router (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:47:12)","timestamp":"2025-04-02T18:38:23.572Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T18:45:20.373Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T18:45:20.380Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:49\n\n  28 });\n  29 \n  30 // Créer l'employé et l'associer à l'utilisateur\n→ 31 const newEmployee = await prisma.employee.create({\n       data: {\n         nationalId: \"j52121\",\n         birthDate: \"1990-10-22\",\n         birthPlace: \"Agadir\",\n         maritalStatus: \"Married\",\n         childrenCount: \"1\",\n         address: \"bloc b numéro 64 Bensergao\",\n         phone: \"0601893447\",\n         email: \"abdallah.baddi@outlook.com\",\n         employeeNumber: \"1\",\n         hireDate: \"2025-04-01\",\n         jobTitle: \"Dev Front\",\n         baseSalary: \"9000\",\n         companyId: \"cm8q20jb70001tgvof9xct5lw\",\n         user: {\n           connect: {\n             id: \"cm90a1xft0000tg6k3f5h39pd\"\n           }\n         },\n     +   lastName: String\n       }\n     })\n\nArgument `lastName` is missing.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:27)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T18:45:37.401Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:49\n\n  28 });\n  29 \n  30 // Créer l'employé et l'associer à l'utilisateur\n→ 31 const newEmployee = await prisma.employee.create({\n       data: {\n         nationalId: \"J2154\",\n         lastName: \"baddi\",\n         firstName: \"abdallah\",\n         birthDate: \"1986-10-22\",\n         birthPlace: \"Agadir\",\n         maritalStatus: \"Married\",\n         childrenCount: \"1\",\n         address: \"B2 N64 Anouar Bensergao Agadir\",\n         phone: \"0601893447\",\n         email: \"abdallah.baddi@gmail.com\",\n         employeeNumber: \"1\",\n         hireDate: \"2025-01-01\",\n         jobTitle: \"Dev Front\",\n         baseSalary: \"9000\",\n         companyId: \"cm8q20jb70001tgvof9xct5lw\",\n         user: {\n           connect: {\n             id: \"cm90apb1c0003tg6ky7umfxda\"\n           }\n         },\n     +   gender: String\n       }\n     })\n\nArgument `gender` is missing.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:27)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:03:48.006Z"}
{"level":"error","message":"Error: Un utilisateur avec cet email existe déjà.\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:15:15)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:18:32.639Z"}
{"level":"error","message":"Error: Un utilisateur avec cet email existe déjà.\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:15:15)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:19:03.089Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:49\n\n  28 });\n  29 \n  30 // Créer l'employé et l'associer à l'utilisateur\n→ 31 const newEmployee = await prisma.employee.create({\n       data: {\n         nationalId: \"J429058\",\n         lastName: \"baddi\",\n         firstName: \"abdallah\",\n         birthDate: \"1986-10-22\",\n         birthPlace: \"Agadir\",\n         childrenCount: \"1\",\n         address: \"B2 N64 Anouar Bensergao\",\n         phone: \"0601893447\",\n         email: \"abdallah.baddi@mail.com\",\n         employeeNumber: \"1\",\n         hireDate: \"2025-02-01\",\n         jobTitle: \"Dev Front\",\n         department: \"Thechnique\",\n         baseSalary: \"9000\",\n         companyId: \"cm8q20jb70001tgvof9xct5lw\",\n         user: {\n           connect: {\n             id: \"cm90b97kw0006tg6ky70dhzob\"\n           }\n         },\n     +   gender: String\n       }\n     })\n\nArgument `gender` is missing.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:27)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:19:16.649Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:49\n\n  28 });\n  29 \n  30 // Créer l'employé et l'associer à l'utilisateur\n→ 31 const newEmployee = await prisma.employee.create({\n       data: {\n         nationalId: \"321645\",\n         lastName: \"baddi\",\n         firstName: \"abdallah\",\n         birthDate: \"2024-12-22\",\n         birthPlace: \"agadir\",\n         gender: \"Male\",\n         phone: \"06215487\",\n         email: \"ab@mail.com\",\n         employeeNumber: \"2\",\n         hireDate: \"2025-01-01\",\n         jobTitle: \"Dev\",\n         department: \"Technique\",\n         baseSalary: \"9000\",\n         companyId: \"cm8q20jb70001tgvof9xct5lw\",\n         user: {\n           connect: {\n             id: \"cm90bsmku0009tg6kpi3fm7oq\"\n           }\n         },\n     +   maritalStatus: String\n       }\n     })\n\nArgument `maritalStatus` is missing.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:27)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:34:22.548Z"}
{"level":"error","message":"Error: Un utilisateur avec cet email existe déjà.\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:15:15)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:39:09.047Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:49\n\n  28 });\n  29 \n  30 // Créer l'employé et l'associer à l'utilisateur\n→ 31 const newEmployee = await prisma.employee.create({\n       data: {\n         nationalId: \"321645\",\n         lastName: \"baddi\",\n         firstName: \"abdallah \",\n         birthDate: \"2024-12-22\",\n         birthPlace: \"agadir\",\n         gender: \"Male\",\n         phone: \"06215487\",\n         email: \"abb@mail.com\",\n         employeeNumber: \"2\",\n         hireDate: \"2025-01-01\",\n         jobTitle: \"Dev\",\n         department: \"Technique\",\n         baseSalary: \"9000\",\n         companyId: \"cm8q20jb70001tgvof9xct5lw\",\n         user: {\n           connect: {\n             id: \"cm90bz9rx000ctg6k7xw0cewv\"\n           }\n         },\n     +   maritalStatus: String\n       }\n     })\n\nArgument `maritalStatus` is missing.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:27)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:39:32.547Z"}
{"level":"error","message":"Error: Un utilisateur avec cet email existe déjà.\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:15:15)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:41:56.769Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:49\n\n  28 });\n  29 \n  30 // Créer l'employé et l'associer à l'utilisateur\n→ 31 const newEmployee = await prisma.employee.create({\n       data: {\n         nationalId: \"321645\",\n         lastName: \"baddi\",\n         firstName: \"abdallah \",\n         birthDate: \"2024-12-22\",\n         birthPlace: \"agadir\",\n         gender: \"Male\",\n         maritalStatus: \"Single\",\n         phone: \"06215487\",\n         email: \"abzb@mail.com\",\n         employeeNumber: \"2\",\n         hireDate: \"2025-01-01\",\n         jobTitle: \"Dev\",\n         department: \"Technique\",\n         baseSalary: \"9000\",\n         companyId: \"cm8q20jb70001tgvof9xct5lw\",\n         user: {\n           connect: {\n             id: \"cm90c2iay000ftg6khbhlre18\"\n           }\n         },\n     +   contractType: String\n       }\n     })\n\nArgument `contractType` is missing.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:27)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:42:03.569Z"}
{"level":"error","message":"Error: Un utilisateur avec cet email existe déjà.\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:15:15)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:42:28.285Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:49\n\n  28 });\n  29 \n  30 // Créer l'employé et l'associer à l'utilisateur\n→ 31 const newEmployee = await prisma.employee.create({\n       data: {\n         nationalId: \"321645\",\n         lastName: \"baddi\",\n         firstName: \"abdallah \",\n         birthDate: \"2024-12-22\",\n         birthPlace: \"agadir\",\n         gender: \"Male\",\n         maritalStatus: \"Single\",\n         phone: \"06215487\",\n         email: \"abzbe@mail.com\",\n         employeeNumber: \"2\",\n         hireDate: \"2025-01-01\",\n         jobTitle: \"Dev\",\n         department: \"Technique\",\n         contractType: \"Permanent\",\n         baseSalary: \"9000\",\n         companyId: \"cm8q20jb70001tgvof9xct5lw\",\n         user: {\n           connect: {\n             id: \"cm90c36qq000itg6kmpmbh2qe\"\n           }\n         },\n     +   paymentMethod: String\n       }\n     })\n\nArgument `paymentMethod` is missing.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:27)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T19:42:35.238Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:49\n\n  28 });\n  29 \n  30 // Créer l'employé et l'associer à l'utilisateur\n→ 31 const newEmployee = await prisma.employee.create({\n       data: {\n         nationalId: \"J46545\",\n         lastName: \"Baddi\",\n         firstName: \"Abdallah\",\n         birthDate: \"1986-10-22\",\n                    ~~~~~~~~~~~~\n         birthPlace: \"Essaouira\",\n         gender: \"Male\",\n         maritalStatus: \"Married\",\n         childrenCount: \"1\",\n         address: \"Bloc b2 N 64 \",\n         phone: \"0601893447\",\n         email: \"abdallah.baddi@gmail.com\",\n         employeeNumber: \"14147\",\n         hireDate: \"2025-02-01\",\n         jobTitle: \"Dev Front\",\n         department: \"Thechnique\",\n         contractType: \"Permanent\",\n         baseSalary: \"9000\",\n         paymentMethod: \"Bank Transfer\",\n         companyId: \"cm8q20jb70001tgvof9xct5lw\",\n         user: {\n           connect: {\n             id: \"cm90e1mp2000ltg6k0mu058z5\"\n           }\n         }\n       }\n     })\n\nInvalid value for argument `birthDate`: premature end of input. Expected ISO-8601 DateTime.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:27)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T20:37:22.013Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:49\n\n  28 });\n  29 \n  30 // Créer l'employé et l'associer à l'utilisateur\n→ 31 const newEmployee = await prisma.employee.create({\n       data: {\n         nationalId: \"J5421\",\n         lastName: \"abdallah\",\n         firstName: \"baddi\",\n         birthDate: \"1986-10-22\",\n                    ~~~~~~~~~~~~\n         birthPlace: \"Essouira\",\n         gender: \"Male\",\n         maritalStatus: \"Married\",\n         childrenCount: \"1\",\n         address: \"Bloc 2 N 64\",\n         phone: \"0601893447\",\n         email: \"abdallah.baddi@outlook\",\n         employeeNumber: \"32154\",\n         hireDate: \"2025-01-01\",\n         jobTitle: \"Dev\",\n         contractType: \"Permanent\",\n         baseSalary: \"9000\",\n         paymentMethod: \"Bank Transfer\",\n         companyId: \"cm8q20jb70001tgvof9xct5lw\",\n         user: {\n           connect: {\n             id: \"cm90eikq6000otg6koci99ivj\"\n           }\n         }\n       }\n     })\n\nInvalid value for argument `birthDate`: premature end of input. Expected ISO-8601 DateTime.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:27)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T20:50:32.453Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T20:57:47.907Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T20:57:47.914Z"}
{"level":"error","message":"Error: Un utilisateur avec cet email existe déjà.\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:15:15)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T20:57:50.640Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:51\n\n  28 });\n  29 \n  30   // Créer l'employé et l'associer à l'utilisateur\n→ 31   const newEmployee = await prisma.employee.create({\n         data: {\n           nationalId: \"J5421\",\n           lastName: \"abdallah\",\n           firstName: \"baddi\",\n           birthDate: new Date(\"1986-10-22T00:00:00.000Z\"),\n           birthPlace: \"Essouira\",\n           gender: \"Male\",\n           maritalStatus: \"Married\",\n           childrenCount: \"1\",\n                          ~~~\n           address: \"Bloc 2 N 64\",\n           phone: \"0601893447\",\n           email: \"abdallah.baddi@outlook\",\n           employeeNumber: \"32154\",\n           hireDate: new Date(\"2025-01-01T00:00:00.000Z\"),\n           jobTitle: \"Dev\",\n           contractType: \"Permanent\",\n           baseSalary: \"9000\",\n           paymentMethod: \"Bank Transfer\",\n           companyId: \"cm8q20jb70001tgvof9xct5lw\",\n           user: {\n             connect: {\n               id: \"cm90esc7q0000tgcwrzunsu62\"\n             }\n           }\n         }\n       })\n\nArgument `childrenCount`: Invalid value provided. Expected Int, provided String.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:29)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T20:58:07.971Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T20:59:26.823Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T20:59:26.830Z"}
{"level":"error","message":"Error: Un utilisateur avec cet email existe déjà.\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:15:15)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T20:59:33.866Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:51\n\n  28 });\n  29 \n  30   // Créer l'employé et l'associer à l'utilisateur\n→ 31   const newEmployee = await prisma.employee.create({\n         data: {\n           nationalId: \"J5421\",\n           lastName: \"abdallah\",\n           firstName: \"baddi\",\n           birthDate: new Date(\"1986-10-22T00:00:00.000Z\"),\n           birthPlace: \"Essouira\",\n           gender: \"Male\",\n           maritalStatus: \"Married\",\n           childrenCount: 1,\n           address: \"Bloc 2 N 64\",\n           phone: \"0601893447\",\n           email: \"abdallah.baddi@outlook\",\n           employeeNumber: \"32154\",\n           hireDate: new Date(\"2025-01-01T00:00:00.000Z\"),\n           jobTitle: \"Dev\",\n           contractType: \"Permanent\",\n           baseSalary: \"9000\",\n                       ~~~~~~\n           paymentMethod: \"Bank Transfer\",\n           companyId: \"cm8q20jb70001tgvof9xct5lw\",\n           user: {\n             connect: {\n               id: \"cm90eui9v0000tg58bv0dmm4h\"\n             }\n           }\n         }\n       })\n\nArgument `baseSalary`: Invalid value provided. Expected Float, provided String.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:29)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T20:59:49.136Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T21:00:24.343Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T21:00:24.352Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.create()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:51\n\n  28 });\n  29 \n  30   // Créer l'employé et l'associer à l'utilisateur\n→ 31   const newEmployee = await prisma.employee.create({\n         data: {\n           nationalId: \"J5421\",\n           lastName: \"abdallah\",\n           firstName: \"baddi\",\n           birthDate: new Date(\"1986-10-22T00:00:00.000Z\"),\n           birthPlace: \"Essouira\",\n           gender: \"Male\",\n           maritalStatus: \"Married\",\n           childrenCount: 1,\n           address: \"Bloc 2 N 64\",\n           phone: \"0601893447\",\n           email: \"abdallah.baddi@outlook\",\n           employeeNumber: \"32154\",\n           hireDate: new Date(\"2025-01-01T00:00:00.000Z\"),\n           jobTitle: \"Dev\",\n           contractType: \"Permanent\",\n           baseSalary: 9000,\n           paymentMethod: \"Bank Transfer\",\n           companyId: \"cm8q20jb70001tgvof9xct5lw\",\n           user: {\n           ~~~~\n             connect: {\n               id: \"cm90evn740000tg4cu7rsfihh\"\n             }\n           },\n       ?   id?: String,\n       ?   department?: String | Null,\n       ?   bankName?: String | Null,\n       ?   bankAccount?: String | Null,\n       ?   socialSecurityNumber?: String | Null,\n       ?   healthInsuranceNumber?: String | Null,\n       ?   retirementFundNumber?: String | Null,\n       ?   socialSecurityRate?: Float | Null,\n       ?   healthInsuranceRate?: Float | Null,\n       ?   retirementFundRate?: Float | Null,\n       ?   incomeTax?: Float | Null,\n       ?   benefitsInKind?: String | Null,\n       ?   terminationDate?: DateTime | Null,\n       ?   terminationReason?: String | Null,\n       ?   status?: String,\n       ?   userId?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         }\n       })\n\nUnknown argument `user`. Did you mean `userId`? Available options are marked with ?.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:31:29)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T21:00:42.286Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T21:04:38.590Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T21:04:38.598Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T21:08:12.875Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T21:08:12.884Z"}
{"level":"error","message":"TypeError: Cannot read properties of undefined (reading 'companyId')\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:39:46)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-02T21:09:57.047Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-02T21:48:17.496Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-02T21:48:17.503Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-05T23:23:02.824Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-05T23:23:02.879Z"}
{"level":"error","timestamp":"2025-04-05T23:25:28.291Z"}
{"level":"error","timestamp":"2025-04-05T23:25:40.541Z"}
{"level":"error","message":"TypeError: Cannot read properties of undefined (reading 'companyId')\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:39:46)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-05T23:31:07.074Z"}
{"level":"error","message":"Error: Un utilisateur avec cet email existe déjà.\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:15:15)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-05T23:32:21.534Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-05T23:38:32.697Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-05T23:38:32.707Z"}
{"level":"error","message":"TypeError: Cannot read properties of undefined (reading 'companyId')\n    at Object.createEmployeeWithUser (D:\\work\\flexpaie\\data-service\\src\\services\\employeeService.js:39:37)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\users.js:92:20","timestamp":"2025-04-05T23:38:53.371Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-05T23:39:11.139Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-05T23:39:11.146Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-05T23:51:44.667Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-05T23:51:44.675Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.findMany()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\companyService.js:79:28\n\n  76 \n  77 // Obtenir tous les utilisateurs d'une entreprise\n  78 async getCompanyUsers(companyId) {\n→ 79   return prisma.employee.findMany({\n         where: {\n           companyId: \"cm8q20jb70001tgvof9xct5lw\"\n         },\n         include: {\n           role: true,\n           ~~~~\n       ?   company?: true,\n       ?   user?: true\n         }\n       })\n\nUnknown field `role` for include statement on model `Employee`. Available options are marked with ?.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\companies.js:78:19","timestamp":"2025-04-05T23:51:51.199Z"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.employee.findMany()` invocation in\nD:\\work\\flexpaie\\data-service\\src\\services\\companyService.js:79:28\n\n  76 \n  77 // Obtenir tous les utilisateurs d'une entreprise\n  78 async getCompanyUsers(companyId) {\n→ 79   return prisma.employee.findMany({\n         where: {\n           companyId: \"cm8q20jb70001tgvof9xct5lw\"\n         },\n         include: {\n           role: true,\n           ~~~~\n       ?   company?: true,\n       ?   user?: true\n         }\n       })\n\nUnknown field `role` for include statement on model `Employee`. Available options are marked with ?.\n    at Cn (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Wn.handleRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:7177)\n    at Wn.handleAndLogRequestError (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6858)\n    at Wn.request (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:121:6565)\n    at async l (D:\\work\\flexpaie\\data-service\\node_modules\\@prisma\\client\\runtime\\library.js:130:10067)\n    at async D:\\work\\flexpaie\\data-service\\src\\routes\\companies.js:78:19","timestamp":"2025-04-05T23:51:51.228Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-05T23:52:13.025Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-05T23:52:13.033Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T00:02:34.320Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T00:02:34.331Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T00:03:39.021Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T00:03:39.028Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T00:08:18.668Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T00:08:18.676Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T18:03:54.720Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T18:03:54.734Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T18:06:57.344Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T18:06:57.354Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T18:15:26.802Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T18:16:13.154Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T18:16:13.161Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T18:17:52.629Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T18:17:52.639Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T18:19:37.912Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T18:19:37.920Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T18:23:05.162Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T18:23:05.171Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T20:57:41.969Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T20:57:41.978Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T20:59:08.933Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T20:59:08.941Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T20:59:39.091Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T20:59:39.099Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T21:07:58.698Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T21:07:58.706Z"}
{"level":"error","message":"TypeError: employeeService.getEmployeeById is not a function\n    at D:\\work\\flexpaie\\data-service\\src\\routes\\employees.js:19:44\n    at Layer.handle [as handle_request] (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:284:15\n    at param (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:365:14)\n    at param (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:376:14)\n    at Function.process_params (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:421:3)\n    at next (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:280:10)","timestamp":"2025-04-06T21:08:10.420Z"}
{"level":"error","message":"TypeError: employeeService.getEmployeeById is not a function\n    at D:\\work\\flexpaie\\data-service\\src\\routes\\employees.js:19:44\n    at Layer.handle [as handle_request] (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:284:15\n    at param (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:365:14)\n    at param (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:376:14)\n    at Function.process_params (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:421:3)\n    at next (D:\\work\\flexpaie\\data-service\\node_modules\\express\\lib\\router\\index.js:280:10)","timestamp":"2025-04-06T21:08:10.997Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T21:10:09.005Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T21:10:09.013Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T21:11:59.368Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T21:11:59.375Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T21:14:14.594Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T21:14:14.606Z"}
{"level":"info","message":"Connected to the database successfully","timestamp":"2025-04-06T21:20:34.319Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-04-06T21:20:34.328Z"}
